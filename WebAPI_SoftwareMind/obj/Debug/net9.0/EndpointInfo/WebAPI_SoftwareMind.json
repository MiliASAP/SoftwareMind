{
  "openapi": "3.0.4",
  "info": {
    "title": "Negotiation API",
    "description": "An ASP.NET Core Web API for managing products and negotiations",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/Login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs in a user and returns an authentication token.",
        "requestBody": {
          "description": "The login request containing username and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the JWT token on successful authentication",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid credentials"
          }
        }
      }
    },
    "/api/Negotiation/start": {
      "post": {
        "tags": [
          "Negotiation"
        ],
        "summary": "Starts a new negotiation for a product.",
        "requestBody": {
          "description": "Data transfer object for starting a negotiation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationInsertProductDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationInsertProductDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationInsertProductDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Negotiation successfully created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data or product not found"
          }
        }
      }
    },
    "/api/Negotiation": {
      "get": {
        "tags": [
          "Negotiation"
        ],
        "summary": "Retrieves all negotiations.",
        "responses": {
          "200": {
            "description": "Returns a list of negotiations",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Negotiation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Negotiation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Negotiation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Negotiation/{id}": {
      "get": {
        "tags": [
          "Negotiation"
        ],
        "summary": "Retrieves a negotiation by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The negotiation's unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested negotiation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              }
            }
          },
          "404": {
            "description": "Negotiation not found"
          }
        }
      }
    },
    "/api/Negotiation/decide": {
      "put": {
        "tags": [
          "Negotiation"
        ],
        "summary": "Makes a decision on a negotiation (accept or reject).",
        "requestBody": {
          "description": "The negotiation decision data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationDecisionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationDecisionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationDecisionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Negotiation updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              }
            }
          },
          "404": {
            "description": "Negotiation not found"
          }
        }
      }
    },
    "/api/Negotiation/negotiate": {
      "put": {
        "tags": [
          "Negotiation"
        ],
        "summary": "Allows to retry negotiation by proposing a new price.",
        "requestBody": {
          "description": "Negotiation details for retrying",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationNegotiateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationNegotiateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NegotiationNegotiateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Negotiation updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Negotiation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data or negotiation already decided"
          }
        }
      }
    },
    "/api/Product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieves a list of all products.",
        "responses": {
          "200": {
            "description": "Returns the list of products",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "500": {
            "description": "If there is an internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Creates a new product.",
        "requestBody": {
          "description": "The product to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created product",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "If the input is invalid"
          },
          "401": {
            "description": "If the user is not authorized"
          }
        }
      }
    },
    "/api/Product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Gets a product by its unique id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the product.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the product",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "If the product is not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string",
            "description": "The username of the user.",
            "example": "admin"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The password of the user.",
            "example": "admin123"
          }
        },
        "additionalProperties": false,
        "description": "Represents the request model for logging in."
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "The username of the authenticated user.",
            "nullable": true,
            "example": "admin"
          },
          "accessToken": {
            "type": "string",
            "description": "The access token provided for authenticated requests.",
            "nullable": true,
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
          },
          "expiresIn": {
            "type": "integer",
            "description": "The expiration time of the access token in seconds.",
            "format": "int32",
            "example": 3600
          }
        },
        "additionalProperties": false,
        "description": "Represents the response model for login authentication."
      },
      "Negotiation": {
        "required": [
          "productId",
          "proposedPrice",
          "status"
        ],
        "type": "object",
        "properties": {
          "negotiationId": {
            "type": "integer",
            "description": "The unique identifier of the negotiation.",
            "format": "int32",
            "example": 1
          },
          "productId": {
            "type": "integer",
            "description": "The unique identifier of the product involved in the negotiation.",
            "format": "int32",
            "example": 12
          },
          "proposedPrice": {
            "type": "number",
            "description": "The proposed price for the product during the negotiation.",
            "format": "double",
            "example": 150,5
          },
          "status": {
            "minLength": 1,
            "type": "string",
            "description": "The current status of the negotiation. Possible values: 'Pending', 'Accepted', 'Rejected'.",
            "example": "Pending"
          },
          "attempts": {
            "type": "integer",
            "description": "The number of attempts made to negotiate the price.",
            "format": "int32",
            "example": 2
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date of the negotiation, after which it is no longer valid.",
            "format": "date-time",
            "example": "2025-04-17T00:00:00Z"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "additionalProperties": false,
        "description": "Represents a negotiation process for a product."
      },
      "NegotiationDecisionDTO": {
        "required": [
          "decision",
          "negotiationId"
        ],
        "type": "object",
        "properties": {
          "negotiationId": {
            "type": "integer",
            "description": "The unique identifier for the negotiation.",
            "format": "int32",
            "example": 10
          },
          "decision": {
            "minLength": 1,
            "pattern": "(?i)^(accept|reject)$",
            "type": "string",
            "description": "The decision regarding the negotiation, either \"accept\" or \"reject\".",
            "example": "accept"
          }
        },
        "additionalProperties": false,
        "description": "DTO for negotiating the decision on a product's price.\r\nThis model is used when the negotiation process is being decided, either by accepting or rejecting the negotiation."
      },
      "NegotiationInsertProductDTO": {
        "required": [
          "productId",
          "proposedPrice"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "description": "The unique identifier for the product being negotiated.",
            "format": "int32",
            "example": 1
          },
          "proposedPrice": {
            "minimum": 0,01,
            "type": "number",
            "description": "The proposed price for the product in the negotiation.\r\nThe price must be greater than zero.",
            "format": "double",
            "example": 100,5
          }
        },
        "additionalProperties": false,
        "description": "DTO used for inserting a new negotiation with a product.\r\nThis model is used when creating a new negotiation for a product, where the user proposes a price."
      },
      "NegotiationNegotiateDTO": {
        "required": [
          "negotiationId",
          "proposedPrice"
        ],
        "type": "object",
        "properties": {
          "negotiationId": {
            "type": "integer",
            "description": "The unique identifier of the negotiation.",
            "format": "int32",
            "example": 1
          },
          "proposedPrice": {
            "minimum": 0,01,
            "type": "number",
            "description": "The proposed price for the product in the negotiation.\r\nThe price must be greater than zero.",
            "format": "double",
            "example": 100,5
          }
        },
        "additionalProperties": false,
        "description": "DTO used for negotiating an existing product price within an active negotiation.\r\nThis model is used when retrying negotiations with a new proposed price."
      },
      "Product": {
        "required": [
          "name",
          "price"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "description": "The unique identifier of the product.",
            "format": "int32",
            "example": 12
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the product.",
            "example": "Laptop"
          },
          "price": {
            "minimum": 0,01,
            "type": "number",
            "description": "The price of the product.",
            "format": "double",
            "example": 999,99
          }
        },
        "additionalProperties": false,
        "description": "Represents a product in the system."
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter your JWT Access Token",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}